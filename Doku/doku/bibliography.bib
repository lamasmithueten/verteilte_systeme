
@inproceedings{su_modular_2024,
	title = {Modular Monolith: Is This the Trend in Software Architecture?},
	url = {https://ieeexplore.ieee.org/document/10669865},
	shorttitle = {Modular Monolith},
	abstract = {Recently, modular monolith architecture has attracted the attention of practitioners, as Google proposed a "Service Weaver" framework to enable developers to write applications as modular monolithic and deploy them as a set of microservices. Google considered it a framework with the best of both worlds, and it seems to be a trend in software architecture. This paper aims to understand the definition of the modular monolith in industry and investigate frameworks and cases building modular monolith architecture. We conducted a systematic grey literature review, and the results show that modular monolith combines the advantages of monoliths with microservices. We found three frameworks and four cases of building modular monolith architecture. In general, the modular monolith is an alternative way to microservices, and it also could be a previous step before systems migrate to microservices.},
	eventtitle = {2024 {IEEE}/{ACM} International Workshop New Trends in Software Architecture ({SATrends})},
	pages = {10--13},
	booktitle = {2024 {IEEE}/{ACM} International Workshop New Trends in Software Architecture ({SATrends})},
	author = {Su, Ruoyu and Li, Xiaozhou},
	urldate = {2024-12-20},
	date = {2024-04},
	keywords = {Architecture, Bibliographies, Buildings, Computer architecture, Microservice architectures, microservices, modular monolith, software architecture, Software architecture, software engineering, systematic grey literature review, Systematics},
	file = {Full Text PDF:/home/werr/Zotero/storage/NJ7NVYRE/Su und Li - 2024 - Modular Monolith Is This the Trend in Software Architecture.pdf:application/pdf;IEEE Xplore Abstract Record:/home/werr/Zotero/storage/YBFXZW92/10669865.html:text/html},
}

@article{fowler_microservices_2015,
	title = {Microservices: Nur ein weiteres Konzept in der Softwarearchitektur oder mehr},
	volume = {1},
	pages = {14--20},
	number = {2015},
	journaltitle = {Objektspektrum},
	author = {Fowler, Martin and Lewis, James},
	date = {2015},
	file = {fowler_lewis_OTS_Architekturen_15.pdf:/home/werr/Zotero/storage/LAC9A4PS/fowler_lewis_OTS_Architekturen_15.pdf:application/pdf},
}

@article{watada_emerging_2019,
	title = {Emerging Trends, Techniques and Open Issues of Containerization: A Review},
	volume = {7},
	issn = {2169-3536},
	url = {https://ieeexplore.ieee.org/abstract/document/8861307},
	doi = {10.1109/ACCESS.2019.2945930},
	shorttitle = {Emerging Trends, Techniques and Open Issues of Containerization},
	abstract = {Containerization is revolutionizing the way that many industries operate, provisioning major impact to modern computing technologies because it is extra lightweight, highly portable, energy, resource and storage efficient, cost-effective, performance efficient, and extremely quick during boot up. These often facilitate efficient load balancing, low-level system maintenance, server consolidation (for efficient energy and resource utilization) and replication of instances over geographical locations for better fault tolerance to escalate application reliability. However, some recent literature have addressed various challenges (such as complex networking, persistent storage facilities, cross data centers and multicloud supports, security issues, and lack of available, capable container management {APIs}, etc.) regarding successful container adoption in industries, which might have resulted in a seemingly meager increase in industrial deployments of containerization over the past few years despite bestowing efficient lightweight virtualization. Moreover, a comprehensive overview of containerizations along with their popularity dynamics has still not been found in contemporary literature, which further extends knowledge gap between developers and available technologies. Hence, current study touches upon different technicalities involved in containerization with potential problems and possible solutions along with various important industrial applications to manifest its existing supports and technical hardships. Finally, we have conducted a comprehensive experimental study to compare the performance of {VMs}, containers and unikernels in terms of {CPU} utilization, memory footprints, network bandwidth, execution time and technological maturity using standard benchmarks and observed containers to deliver satisfactory performance in almost all aspects, however, are still not free from issues regarding isolation \& security, performance stability, lack of available efficient tools for crossplatform support and persistent storage. Unikernels deliver good performance with {VM}-like isolation but still need to achieve desired technical maturity (in terms of microprocessor stability, process containment, persistent storage, etc.). {VMs}, on the other hand, are found to provide stable performance throughout, though bigger memory footprints and slower spin up/down remain their biggest weaknesses.},
	pages = {152443--152472},
	journaltitle = {{IEEE} Access},
	author = {Watada, Junzo and Roy, Arunava and Kadikar, Ruturaj and Pham, Hoang and Xu, Bing},
	urldate = {2024-12-20},
	date = {2019},
	note = {Conference Name: {IEEE} Access},
	keywords = {Cloud computing, containerization, Containers, isolation and security, Linux, management and orchestration, Security, Tools, Virtual machine monitors, Virtualization},
	file = {Full Text PDF:/home/werr/Zotero/storage/29ZGL4TG/Watada et al. - 2019 - Emerging Trends, Techniques and Open Issues of Containerization A Review.pdf:application/pdf;IEEE Xplore Abstract Record:/home/werr/Zotero/storage/LL37AZP4/8861307.html:text/html},
}

@online{noauthor_services_0100,
	title = {Services top-level elements},
	url = {https://docs.docker.com/reference/compose-file/services/},
	abstract = {Explore all the attributes the services top-level element can have.},
	titleaddon = {Docker Documentation},
	urldate = {2024-12-20},
	date = {0100},
	langid = {english},
	file = {Snapshot:/home/werr/Zotero/storage/6VB6TYVI/services.html:text/html},
}

@inproceedings{fava_assessing_2024,
	title = {Assessing the Performance of Docker in Docker Containers for Microservice-Based Architectures},
	url = {https://ieeexplore.ieee.org/document/10495554},
	doi = {10.1109/PDP62718.2024.00026},
	abstract = {We provide a comprehensive and updated assessment of Docker versus Docker in Docker ({DinD}), evaluating its impact on {CPU}, memory, disk, and network. Using different workloads, we evaluate {DinD}'s performance across distinct hardware platforms and {GNU}/Linux distributions on cloud Infrastructure as a Service ({laaS}) platforms like Google Compute Engine ({GCE}) and traditional server-based environments. We developed an automated tools suite to achieve our goal. We execute four well-known benchmarks on Docker and its nested-container variant. Our findings indicate that nested-containers require up to 7 seconds for startup, while the Docker standard containers require less than 0.5 seconds for Debian and Alpine operating systems. Our results suggest that Docker containers based on Debian consistently outperform their Alpine counter-parts, showing lower {CPU} latency. A key distinction among these Docker images lies in the varying number of installed libraries (e.g., stretching from 13 to 119) across different Linux distributions for the same system (e.g., {MySQL}). Furthermore, the number of events and {CPU} latency indicates that the influence of {DinD} over Docker proves that it is insignificant for both operating systems. In terms of memory, running containers of Debian-based images consume 20\% more size of memory than those based on Alpine. No significant differences are between nested-containers and Dockers for disk and network {IO}. It is worth emphasizing that some of the disparities, such as a bigger memory footprint, appear to be a direct result of the software stack in use, including different kernel versions. libraries. and other essential packages.},
	eventtitle = {2024 32nd Euromicro International Conference on Parallel, Distributed and Network-Based Processing ({PDP})},
	pages = {137--142},
	booktitle = {2024 32nd Euromicro International Conference on Parallel, Distributed and Network-Based Processing ({PDP})},
	author = {Fava, Felipe Bedinotto and Laviola Leite, Luiz Felipe and Da Silva, Luís Fernando Alves and Da Silva Amalfi Costa, Pedro Ramires and Diniz Nogueira, Angelo Gaspar and Gobus Lopes, Amanda Fagundes and Schepke, Claudio and Kreutz, Diego Luis and Mansilha, Rodrigo Brãndao},
	urldate = {2024-12-20},
	date = {2024-03},
	note = {{ISSN}: 2377-5750},
	keywords = {Benchmark testing, Benchmarks, Cloud Computing, Containers, {DinD}, Docker Containers, Docker in Docker, Libraries, Linux, Memory management, Microservice architectures, Nested-container, Performance Evaluation, Reproducibility of results},
	file = {Full Text PDF:/home/werr/Zotero/storage/9LZHIHXN/Fava et al. - 2024 - Assessing the Performance of Docker in Docker Containers for Microservice-Based Architectures.pdf:application/pdf;IEEE Xplore Abstract Record:/home/werr/Zotero/storage/ZKBWRUC6/10495554.html:text/html},
}
@article{fava2024,
title={Assessing the Performance of Docker in Docker Containers for Microservice-Based Architectures},
author={Fava, Felipe Bedinotto and others},
journal={32nd Euromicro International Conference on Parallel, Distributed and Network-Based Processing},
year={2024},
pages={137--142},
doi={10.1109/PDP62718.2024.00026}
}

@article{watada2019,
title={Emerging Trends, Techniques and Open Issues of Containerization: A Review},
author={Watada, Junzo and others},
journal={IEEE Access},
volume={7},
pages={152443--152472},
year={2019},
doi={10.1109/ACCESS.2019.2945930}
}

@misc{docker_compose_docs,
title={Overview of Docker Compose},
author={Docker Inc.},
howpublished={\url{https://docs.docker.com/compose/overview/}},
year={2024},
note={Accessed: 2024-12-20}
}

@misc{services_docs,
title={Services Top-Level Elements},
author={Docker Inc.},
howpublished={\url{https://docs.docker.com/reference/compose-file/services/}},
year={2024},
note={Accessed: 2024-12-20}
}

@misc{mariadb_docs,
title={MariaDB Documentation},
author={MariaDB Foundation},
howpublished={\url{https://mariadb.com/kb/en/documentation/}},
year={2024},
note={Accessed: 2024-12-20}
}

@misc{docker_persistence,
title={Managing Data in Docker},
author={Docker Inc.},
howpublished={\url{https://docs.docker.com/storage/}},
year={2024},
note={Accessed: 2024-12-20}
}
@misc{environment_variables,
title={Environment Variables in Compose},
author={Docker Inc.},
howpublished={\url{https://docs.docker.com/compose/environment-variables/}},
year={2024},
note={Accessed: 2024-12-20}
}

@misc{docker_healthcheck,
title={Docker Healthcheck Documentation},
author={Docker Inc.},
howpublished={\url{https://docs.docker.com/engine/reference/builder/\#healthcheck}},
year={2024},
note={Accessed: 2024-12-20}
}

@article{watada2019,
title={Emerging Trends, Techniques and Open Issues of Containerization: A Review},
author={Watada, Junzo and others},
journal={IEEE Access},
volume={7},
pages={152443--152472},
year={2019},
doi={10.1109/ACCESS.2019.2945930}
}

@misc{mariadb_communication,
title={MariaDB Connectivity},
author={MariaDB Foundation},
howpublished={\url{https://mariadb.com/kb/en/connect/}},
year={2024},
note={Accessed: 2024-12-20}
}